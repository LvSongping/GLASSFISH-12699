Index: DeployCommand.java
===================================================================
--- DeployCommand.java	(revision 57619)
+++ DeployCommand.java	(working copy)
@@ -155,7 +155,7 @@
     private File safeCopyOfDeploymentPlan = null;
     private File safeCopyOfAltDD = null;
     private File safeCopyOfRuntimeAltDD = null;
-    private File originalPathValue;
+    private URI originalPathValue;
     private List<String> previousTargets = new ArrayList<String>();
     private Properties previousVirtualServers = new Properties();
     private Properties previousEnabledAttributes = new Properties();
@@ -192,14 +192,15 @@
         report = context.getActionReport();
         logger = context.getLogger();
 
-        originalPathValue = path;
-        if (!path.exists()) {
-            report.setMessage(localStrings.getLocalString("fnf","File not found", path.getAbsolutePath()));
+        originalPathValue = getPath();
+        File file = getPathAsFile();
+        if (!file.exists()) {
+            report.setMessage(localStrings.getLocalString("fnf","File not found", file.getAbsolutePath()));
             report.setActionExitCode(ActionReport.ExitCode.FAILURE);
             return false;
         }
-        if (!path.canRead()) {
-            report.setMessage(localStrings.getLocalString("fnr","File {0} does not have read permission", path.getAbsolutePath()));
+        if (!file.canRead()) {
+            report.setMessage(localStrings.getLocalString("fnr","File {0} does not have read permission", file.getAbsolutePath()));
             report.setActionExitCode(ActionReport.ExitCode.FAILURE);
             return false;
         }
@@ -212,17 +213,18 @@
 
         
         try {
-            archive = archiveFactory.openArchive(path, this);
+            archive = file != null ? archiveFactory.openArchive(file, this)
+                    : archiveFactory.openArchive(getPath(), this);
             if (tracing!=null) {
                 tracing.addMark(DeploymentTracing.Mark.ARCHIVE_OPENED);
             }
         } catch (IOException e) {
             final String msg = localStrings.getLocalString("deploy.errOpeningArtifact",
-                    "deploy.errOpeningArtifact", path.getAbsolutePath());
+                    "deploy.errOpeningArtifact", getPath());
             if (logReportedErrors) {
                 report.failure(logger, msg, e);
             } else {
-                report.setMessage(msg + path.getAbsolutePath() + e.toString());
+                report.setMessage(msg + getPath() + e.toString());
                 report.setActionExitCode(ActionReport.ExitCode.FAILURE);
             }
             return false;
@@ -248,7 +250,7 @@
                 tracing.addMark(DeploymentTracing.Mark.ARCHIVE_HANDLER_OBTAINED);
             }
             if (archiveHandler==null) {
-                report.failure(logger,localStrings.getLocalString("deploy.unknownarchivetype","Archive type of {0} was not recognized",path));
+                report.failure(logger,localStrings.getLocalString("deploy.unknownarchivetype","Archive type of {0} was not recognized",getPath()));
                 return false;
             }
 
@@ -403,7 +405,7 @@
             if (!source.isDirectory()) {
                 isDirectoryDeployed = false;
                 expansionDir = new File(domain.getApplicationRoot(), VersioningUtils.getRepositoryName(name));
-                path = expansionDir;
+                setPath(expansionDir);
             } else {
                 // test if a version is already directory deployed from this dir
                 String versionFromSameDir =
@@ -550,7 +552,7 @@
                 logger.log(Level.FINE, localStrings.getLocalString(
                         "errClosingArtifact", 
                         "Error while closing deployable artifact : ",
-                        path.getAbsolutePath()), e);
+                        getPath()), e);
             }
             
             if (report.getActionExitCode().equals(ActionReport.ExitCode.SUCCESS)) {
