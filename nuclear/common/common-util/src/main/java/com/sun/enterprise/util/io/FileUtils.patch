Index: FileUtils.java
===================================================================
--- FileUtils.java	(revision 56959)
+++ FileUtils.java	(working copy)
@@ -54,6 +54,7 @@
 
 import java.util.logging.Logger;
 import java.util.logging.Level;
+import java.net.URI;
 import java.nio.channels.*;
 import java.nio.ByteBuffer;
 import java.util.regex.Pattern;
@@ -722,6 +723,41 @@
         return f;
     }
 
+    public static void copy(URI fileParam, File result) throws IOException {
+        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
+        InputStream in = null;
+        OutputStream out = null;
+        try {
+            in = fileParam.toURL().openStream();
+            out = new FileOutputStream(result);
+            ReadableByteChannel inChannel = Channels.newChannel(in);
+            WritableByteChannel outChannel = Channels.newChannel(out);
+
+            int read;
+            do {
+                read = inChannel.read(byteBuffer);
+                if (read>0) {
+                    byteBuffer.limit(byteBuffer.position());
+                    byteBuffer.rewind();
+                    int written = 0;
+                    while((written += outChannel.write(byteBuffer)) < read) {}
+                    byteBuffer.clear();
+                }
+            } while (read != -1);
+        } finally {
+            byteBuffer.clear();
+            try {
+                if (in != null) in.close();
+            } catch (IOException e) {
+            }
+           try {
+                if (out != null) out.close();
+            } catch (IOException e) {
+            }
+        }
+
+    }
+
     /**
      * Returns an array of abstract pathnames that matches with the given
      * file extension. If the given abstract pathname does not denote a
